pipeline {
    agent any
    
    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        ECR_REPO = '303530323583.dkr.ecr.us-east-1.amazonaws.com/cafe-r'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    sh 'npm ci'  // More reliable than npm install
                    sh 'npm run build'
                }
            }
        }

        stage('Build Backend') {
            steps {
                dir('backend') {
                    sh 'python3 -m pip install --user -r requirements.txt'
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                sh 'docker build -t cafe-r:latest .'
                withAWS(credentials: 'aws-credentials-id', region: 'us-east-1') {
                    sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REPO}'
                    sh 'docker tag cafe-r:latest ${ECR_REPO}:latest'
                    sh 'docker push ${ECR_REPO}:latest'
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                sshagent(['ec2-ssh-credentials']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ec2-user@54.234.254.239 '
                            docker stop cafe-r || true
                            docker rm cafe-r || true
                            docker pull ${ECR_REPO}:latest
                            docker run -d --name cafe-r -p 80:80 ${ECR_REPO}:latest
                        '
                    """
                }
            }
        }

        stage('Terraform Deploy') {
            steps {
                dir('terraform') {
                    withAWS(credentials: 'aws-credentials-id', region: 'us-east-1') {
                        sh 'terraform init -input=false'
                        sh 'terraform apply -input=false -auto-approve'
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()  // Clean workspace after build
        }
    }
}
